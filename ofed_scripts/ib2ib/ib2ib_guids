eval '(exit $?0)' && 
	eval 'exec perl -S $0 ${1+"$@"}' && 
	eval 'exec perl -S $0 $argv:q'
	if 0;

#############################################################################
#
# Eitan Zahavi,Mellanox Technologies LTD
# Thu Mar  3 04:03:13 2016
#
# ib2ib_guids: Obtain InfiniBand Subnet Names and GUIDs
#
#############################################################################

=head1 TITLE

ib2ib_guids: Obtain InfiniBand Subnet Names and GUIDs

=head1 SYNOPSIS

ib2ib_guids [-mvh] [-d/--disc ibnetdiscover-file]

=head1 DESCRIPTION

This program invokes ibnetdiscover or uses a predefined scan of the network to 
extract the data about host port names and GUIDs. It then writes out the information 
into the format required by ib2ib_setup guids file.

=head1 OPTIONS

=over 8

=item B<--disc|-d ibnetdiscover-file>

Output of ibnetdiscover 

=item B<--verbose|-v>

Run in verbose mode

=item B<--help|-h>

Print a brief help message and exits.

=item B<--man|-m>

Print a detailed help message (man) and exits.

=back

=head1 LICENSE

This code is licensed to Mellanox Technologies LTD

=head1 Revision

$Revision$

=head1 AUTHOR

Copyright (C) Eitan Zahavi, Mellanox LTD, Feb, 2016
All rights reserved

=cut

#############################################################################
#
# Commands line parsing
# 

use vars qw($VERSION);

# use RCS info as we reposit in RCS
($VERSION) = ('$Revision$' =~ m/(.*)/);

use strict;
use warnings;
use diagnostics;
use Getopt::Long;
use Pod::Usage;

my $verbose = 0;
my ($opt_help, $opt_man);

my $opt_d;

GetOptions(
    'd|disc=s'  => \$opt_d,
    'v|verbose' => \$verbose,
    'h|help'    => \$opt_help,
    'm|man'     => \$opt_man,
) or pod2usage(-verbose => 1) && exit;

pod2usage(-verbose => 1) && exit if defined $opt_help;
pod2usage(-verbose => 2) && exit if defined $opt_man;

# Replace the below with a check for mandatory arguments
#pod2usage("$0: Missing mandatory arguments.") && exit;

#############################################################################
#
# Data Model : list all global variables
# 
# Examples:
# A simple scalar that means ...
# $simpleScalar;
#
# A list of values: @MY_VALUES = ( "a", "b" );
# @MY_VALUES;
#
my %NAME_BY_PGUID; 
my %PORT_NUM_BY_PGUID; 
my %HOST_PGUIDS; # map by host name of map pguid by port num

#############################################################################
#
# Main Flow
# 

if (defined($opt_d)) {
	 if (!open(F, "<$opt_d")) {
		  print STDERR "-E- Could not read file $opt_d\n";
		  exit(1);
	 }
} else {
	 if (!open(F, "ibnetdiscover|")) {
		  print STDERR "-E- Could not ibnetdiscover\n";
		  exit(1);
	 }
}

my $state = "idle";
my $host;
my $port_num;
my $pguid;
while (my $line = <F>) {
	 if ($state eq "idle") {
		  if ($line =~ m/^Ca.*"(\S+)/) {
				$host = $1;
				$state = "in-ca";
		  }
	 } elsif ($state eq "in-ca") {
		  if ($line =~ m/[[]([0-9]+)[]][(]([0-9a-f]+)/) {
				my ($pn, $guid) = ($1,$2);
				my $pguid = sprintf("0x%016s", $guid);
				$PORT_NUM_BY_PGUID{$pguid} = $pn;
				$NAME_BY_PGUID{$pguid} = $host;
				${$HOST_PGUIDS{$host}}{$pn} = $pguid;
				print STDERR "-V- registering host: $host port: $pn PGUID: $pguid\n"
					 if ($verbose);
		  } elsif ($line =~ m/^\s*$/) {
				$state = "idle";
		  }
	 }
}

my $nG = 0;
print "# This guids file generated by ib2ib_guids\n";
print "# GUID        host    port\n";
foreach my $host (sort(keys(%HOST_PGUIDS))) {
	 foreach my $pn (sort {$a <=> $b} (keys(%{$HOST_PGUIDS{$host}}))) {
		  print "${$HOST_PGUIDS{$host}}{$pn} $host $pn\n";
		  $nG++;
	 }
}

print STDERR "-I- Found $nG host ports\n";
